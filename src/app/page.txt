// src/app/page.js
"use client";

import React, { useState, useEffect, useMemo } from "react";
import dynamic from "next/dynamic";
import axios from "axios";
import {
  Container,
  Grid,
  Paper,
  Typography,
  Box,
  Divider,
  CircularProgress,
  Alert,
  useTheme,
  useMediaQuery,
  List,
  ListItem,
  ListItemText,
  Stack,
  Chip,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Tabs,
  Tab,
} from "@mui/material";
import ExpandMoreIcon from "@mui/icons-material/ExpandMore";

const Chart = dynamic(() => import("react-apexcharts"), { ssr: false });

// ─────────────────────────────────────────────────────────
// 1) MarketSummary: 실시간 지수 등락률 + GPT 해석 (같은 파일 내 정의)
// ─────────────────────────────────────────────────────────
function MarketSummary() {
  const [info, setInfo] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  const theme = useTheme();
  const isSmall = useMediaQuery(theme.breakpoints.down("sm"));

  useEffect(() => {
    axios
      .get("/api/summary")
      .then(res => setInfo(res.data))
      .catch(() => setError("시장 정보를 불러오는 데 실패했습니다."))
      .finally(() => setLoading(false));
  }, []);

  if (loading) {
    return (
      <Box display="flex" justifyContent="center" p={2}>
        <CircularProgress size={24} />
      </Box>
    );
  }
  if (error) {
    return <Alert severity="error">{error}</Alert>;
  }

  const { data, summaries } = info;

  return (
    <Box>
      {Object.entries(data).map(([groupName, groupData]) => (
        <Box key={groupName} mb={4}>
          {/* 그룹 제목 */}
          <Typography
            variant={isSmall ? "h6" : "h5"}
            sx={{ fontWeight: "bold", mb: 1 }}
          >
            {groupName}
          </Typography>

          {/* 지수 변동률 리스트 */}
          <List dense>
            {Object.entries(groupData).map(([label, pct]) => {
              const formatted =
                typeof pct === "number" ? pct.toFixed(2) + "%" : "데이터 없음";
              return (
                <ListItem key={label} disablePadding>
                  <ListItemText primary={`${label}: ${formatted}`} />
                </ListItem>
              );
            })}
          </List>

          {/* 아코디언: 요약 보기 */}
          <Accordion elevation={0}>
            <AccordionSummary
              expandIcon={<ExpandMoreIcon />}
              sx={{ px: 0 }}
            >
              <Typography variant="body2" color="primary">
                요약 보기
              </Typography>
            </AccordionSummary>
            <AccordionDetails sx={{ p: 0 }}>
              <Divider sx={{ mb: 1 }} />
              <Typography
                variant="body2"
                sx={{ whiteSpace: "pre-wrap", color: "#444" }}
              >
                {summaries[groupName]}
              </Typography>
            </AccordionDetails>
          </Accordion>
        </Box>
      ))}
    </Box>
  );
}


// ─────────────────────────────────────────────────────────
// NewsHeadlines 컴포넌트 (헤드라인 + 요약)
// ─────────────────────────────────────────────────────────
function NewsHeadlines() {
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const theme = useTheme();
  const isSmall = useMediaQuery(theme.breakpoints.down("sm"));

  useEffect(() => {
    axios
      .get("/api/news")
      .then((res) => setData(res.data))
      .catch(() => setError("뉴스를 불러오는 데 실패했습니다."))
      .finally(() => setLoading(false));
  }, []);

  if (loading)
    return (
      <Box display="flex" justifyContent="center" p={2}>
        <CircularProgress size={24} />
      </Box>
    );
  if (error) return <Alert severity="error">{error}</Alert>;

  // data = { headlines: [{ title, url }...], summary: "..." }
  return (
    <Box>
      <Typography
        variant={isSmall ? "h6" : "h5"}
        sx={{ fontWeight: "bold", mb: 1 }}
      >
        전일/당일 주요 뉴스
      </Typography>

      {/* 1) 헤드라인 리스트 */}
      <List dense>
        {data.headlines.map(({ title, url }, i) => (
          <ListItem key={i} disablePadding>
            <ListItemText
              primary={
                <a
                  href={url}
                  target="_blank"
                  rel="noopener noreferrer"
                  style={{ color: theme.palette.primary.main }}
                >
                  {title}
                </a>
              }
            />
          </ListItem>
        ))}
      </List>

      <Divider sx={{ my: 1 }} />

      {/* 2) GPT 요약 */}
      <Typography
        variant="body2"
        sx={{ whiteSpace: "pre-wrap", color: "#444" }}
      >
        {data.summary}
      </Typography>
    </Box>
  );
}

// ─────────────────────────────────────────────────────────
// 3) EconomicCalendar: 지표·이벤트 일정 표시
// ─────────────────────────────────────────────────────────
function EconomicCalendar() {
  const [events, setEvents] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    axios
      .get("/api/economic")
      .then(res => setEvents(res.data))
      .catch(() => setError("경제 일정을 불러올 수 없습니다."))
      .finally(() => setLoading(false));
  }, []);

  if (loading) return <CircularProgress size={24} />;
  if (error) return <Alert severity="error">{error}</Alert>;

  // events: [{ country, event, date, time, actual, previous, consensus }, ...]
  return (
    <List dense>
      {events.map((ev, i) => {
        // 날짜를 'MM/DD' 형식으로
        const d = new Date(ev.date);
        const dateStr = d.toLocaleDateString("ko-KR", {
          month: "2-digit",
          day: "2-digit",
        });
        return (
          <ListItem key={i} disablePadding>
            <ListItemText
              primary={`${dateStr} ${ev.time} | ${ev.country} | ${ev.event}`}
              secondary={
                ev.consensus
                  ? `예상: ${ev.consensus}   직전: ${ev.previous}`
                  : null
              }
            />
          </ListItem>
        );
      })}
    </List>
  );
}

// ─────────────────────────────────────────────────────────
// 4) MarketSentiment: 시장 심리 지표
// ─────────────────────────────────────────────────────────
function MarketSentiment() {
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    axios
      .get("/api/sentiment")
      .then((res) => setData(res.data))
      .catch(() => setError("시장 심리 지표를 불러오지 못했습니다."))
      .finally(() => setLoading(false));
  }, []);

  if (loading) return <CircularProgress size={24} />;
  if (error) return <Alert severity="error">{error}</Alert>;

  const { vix, fngValue, fngText, putCallRatio, shortInterest } = data;

return (
  <List dense>
    <ListItem>
      <ListItemText
        primary={`유동 비율: ${ratios.currentRatio.toFixed(2)}`}
        secondary={`업종 평균: ${industryAverages.currentRatio.toFixed(2)}`}
      />
    </ListItem>
    <ListItem>
      <ListItemText
        primary={`부채 비율: ${ratios.debtToEquity.toFixed(2)}`}
        secondary={`업종 평균: ${industryAverages.debtToEquity.toFixed(2)}`}
      />
    </ListItem>
    <ListItem>
      <ListItemText
        primary={`ROA: ${ratios.returnOnAssets.toFixed(2)}%`}
        secondary={`업종 평균: ${industryAverages.returnOnAssets.toFixed(2)}%`}
      />
    </ListItem>
    <ListItem>
      <ListItemText
        primary={`ROE: ${ratios.returnOnEquity.toFixed(2)}%`}
        secondary={`업종 평균: ${industryAverages.returnOnEquity.toFixed(2)}%`}
      />
    </ListItem>
  </List>
);



// 섹터명 매핑 (영어 -> 한글)
const sectorNameMap = {
  technology: "기술",
  "consumer cyclical": "소비재",
  "financial services": "금융",
  "communication services": "통신서비스",
  "consumer defensive": "소비재",
  healthcare: "헬스케어",
  energy: "에너지",
  "basic materials": "기본 소재",
  financials: "금융",
  industrials: "산업",
  utilities: "유틸리티",
  "real estate": "부동산",
  materials: "소재",
  // 필요한 경우 추가 섹터를 여기에 추가
};

// 섹터별 색상 매핑 (한글 섹터명 기준)
const predefinedColors = {
  기술: "#5A9BD5", // 연한 파란색
  소비재: "#FFB6C1", // 연한 핑크
  금융: "#32CD32", // 라임 그린
  통신서비스: "#FFA07A", // 연한 살몬
  헬스케어: "#FFD700", // 골드
  에너지: "#FF6347", // 토마토
  "기본 소재": "#FF69B4", // 핫 핑크
  산업: "#9370DB", // 미디엄 퍼플
  유틸리티: "#40E0D0", // 터쿼이즈
  부동산: "#F08080", // 연한 코랄
  소재: "#DA70D6", // 오키드
  "알 수 없음": "#A9A9A9", // 다크 그레이
};




function MarketCapTreemap() {
  const [series, setSeries] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null); // 에러 상태 추가

  const theme = useTheme();
  const isSmallScreen = useMediaQuery(theme.breakpoints.down("sm"));

  useEffect(() => {
    async function fetchMarketCap() {
      try {
        setLoading(true);
        setError(null); // 이전 에러 상태 초기화
        const res = await axios.get("/api/marketcap");
        // Array of {symbol, companyName, sector, marketCap, ...}
        const data = res.data.filter(
          (item) => item.sector && item.marketCap && item.marketCap > 0
        );

        // 섹터별 그룹화
        const sectorMap = {};
        data.forEach((item) => {
          const englishSector = item.sector;
          console.log(`Fetching sector: ${englishSector}`);

          function getKoreanSector(englishSector) {
            const normalizedSector = englishSector.trim().toLowerCase();
            return sectorNameMap[normalizedSector] || "알 수 없음";
          }

          const koreanSector = getKoreanSector(englishSector);

          if (!sectorMap[koreanSector]) {
            sectorMap[koreanSector] = [];
          }
          sectorMap[koreanSector].push({
            x: item.symbol, // 심볼만 표시
            y: Math.round(item.marketCap / 1e9), // 십억 달러 단위
            custom: {
              name: item.companyName, // 회사명 추가
              symbol: item.symbol, // 심볼 추가
            },
          });
        });

        const finalSeries = Object.entries(sectorMap)
          // "알 수 없음" 섹터를 제외하려면 다음 줄의 주석을 해제하세요.
          // .filter(([sector]) => sector !== '알 수 없음')
          .map(([sector, arr]) => ({
            name: sector,
            data: arr,
          }));
        setSeries(finalSeries);
      } catch (error) {
        console.error("시가총액 데이터 가져오기 오류:", error);
        setError("시가총액 데이터를 불러오는 데 문제가 발생했습니다. 나중에 다시 시도해주세요.");
      } finally {
        setLoading(false);
      }
    }
    fetchMarketCap();
  }, []);

  // 색상 배열 생성 (연한 색상)
  const colorArray = useMemo(() => {
    return series.map(
      (seriesItem) => predefinedColors[seriesItem.name] || "#A9A9A9"
    );
  }, [series]);

// 차트 옵션 메모이제이션
const options = useMemo(
  () => ({
    chart: {
      type: "treemap",
      toolbar: { show: false },
    },
    plotOptions: {
      treemap: {
        enableShades: false,     // 그라데이션/쉐이드 모두 끔
        distributed: false,
        dataLabels: {
          enabled: true,
          style: {
            fontSize: isSmallScreen ? "14px" : "20px",
            colors: ["#fff"],
            fontWeight: "bold",
          },
          formatter: function (val) {
            const maxLength = 5;
            return val.length <= maxLength ? val : "";
          },
        },
      },
    },
    colors: colorArray,         // 단색만 사용
    tooltip: {
      custom: ({ dataPointIndex, seriesIndex, w }) => {
        const data =
          w.globals.initialSeries[seriesIndex].data[dataPointIndex].custom;
        const marketCap =
          w.globals.initialSeries[seriesIndex].data[dataPointIndex].y;
        return `<div style="padding:10px; font-size:${
          isSmallScreen ? "14px" : "18px"
        }px;">
                  <strong>${data.symbol}</strong><br/>
                  회사명: ${data.name}<br/>
                  시가총액: $${marketCap}B
                </div>`;
      },
      theme: "light",
    },
    legend: {
      show: false,
    },
    responsive: [
      {
        breakpoint: 1000,
        options: {
          plotOptions: {
            treemap: {
              dataLabels: {
                style: { fontSize: "15px" },
              },
            },
          },
          chart: {
            height: isSmallScreen ? 600 : 800,
          },
        },
      },
    ],
  }),
  [colorArray, isSmallScreen]
);

  // 커스텀 레전드 생성
  const CustomLegend = () => {
    return (
      <Stack
        direction="row"
        spacing={1}
        flexWrap="wrap"
        sx={{ mb: isSmallScreen ? 1 : 2 }}
      >
        {series.map((seriesItem) => (
          <Chip
            key={seriesItem.name}
            label={seriesItem.name}
            sx={{
              backgroundColor: predefinedColors[seriesItem.name] || "#A9A9A9",
              color: "#fff",
              marginBottom: isSmallScreen ? "5px" : "0px",
              fontSize: isSmallScreen ? "12px" : "14px",
              height: isSmallScreen ? "24px" : "32px",
            }}
          />
        ))}
      </Stack>
    );
  };

  if (loading) {
    return (
      <Box display="flex" justifyContent="center" alignItems="center" height="300px">
        <CircularProgress />
      </Box>
    );
  }

  if (error) {
    return (
      <Box>
        <Alert severity="error">{error}</Alert>
      </Box>
    );
  }

  if (series.length === 0) {
    return <Typography>데이터가 없습니다.</Typography>;
  }

  return (
    <Box display="flex" flexDirection="column">
      <Box sx={{ mb: isSmallScreen ? 2 : 3 }}>
        <Typography
          variant={isSmallScreen ? "h6" : "h4"}
          sx={{ fontWeight: "bold" }}
          gutterBottom
        >
          미국 시가총액 상위 100
        </Typography>
        <Divider
          sx={{
            width: "100%",
            borderColor: theme.palette.primary.light,
            mb: isSmallScreen ? 1 : 2,
          }}
        />
      </Box>
      <CustomLegend />
      <Chart
        options={options}
        series={series}
        type="treemap"
        height={isSmallScreen ? 600 : 800}
      />
    </Box>
  );
}

export default function MainPage() {
  const theme = useTheme();
  const isSmallScreen = useMediaQuery(theme.breakpoints.down("sm"));
  // 탭 인덱스 상태 선언
  const [tabIndex, setTabIndex] = useState(0);
  const handleTabChange = (event, newValue) => {
    setTabIndex(newValue);
  };

  return (
    <Box
      sx={{
        background: "linear-gradient(to bottom, #f0f2f5, #dfe6e9)",
        minHeight: "100vh",
        py: 4,
      }}
    >
      <Container maxWidth="lg">
        {/* 페이지 헤더 */}
        <Box sx={{ textAlign: "center", mb: 4 }}>
          <Typography
            variant={isSmallScreen ? "h4" : "h3"}
            sx={{ fontWeight: "bold", color: "#333" }}
          >
            미국 시장 대시보드
          </Typography>
          <Typography variant="subtitle1" sx={{ color: "#666" }}>
            최신 미국 주요지수 및 시가총액 분석
          </Typography>
        </Box>

        <Grid container spacing={3}>
          {/* 좌측: 탭 */}
          <Grid item xs={12} md={3}>
            <Paper sx={{ p: 0, borderRadius: 2, boxShadow: 3, backgroundColor: "#fff" }}>
    <Tabs
      value={tabIndex}
      onChange={handleTabChange}
      variant="scrollable"
      scrollButtons={false}
      textColor="inherit"
      // ① 언더라인 숨기기
      TabIndicatorProps={{ sx: { display: "none" } }}
      // ② 두 줄로 감싸기
      sx={{
        "& .MuiTabs-flexContainer": {
          flexWrap: "wrap",
        },
      }}
    >
      {["지수 변동률", "뉴스 헤드라인", "경제 일정", "시장 심리"].map((label) => (
        <Tab
          key={label}
          label={label}
          sx={{
            width: "50%",              // 두 개씩 한 줄에
            textTransform: "none",     // 모두 소문자 유지
            // ③ 선택된 탭만 배경 음영 + 둥근 모서리
            "&.Mui-selected": {
              bgcolor: theme.palette.action.selected,
              borderRadius: 1,
            },
          }}
        />
      ))}
    </Tabs>
              <Box sx={{ p: 3 }}>
                {tabIndex === 0 && <MarketSummary />}
                {tabIndex === 1 && <NewsHeadlines />}
                {tabIndex === 2 && <EconomicCalendar />}
                {tabIndex === 3 && <MarketSentiment />}
              </Box>
            </Paper>
          </Grid>

          {/* 우측: 시가총액 상위 100 Treemap */}
          <Grid item xs={12} md={9}>
            <Paper
              sx={{
                p: 3,
                borderRadius: 2,
                boxShadow: 3,
                backgroundColor: "#fff",
              }}
            >
              <MarketCapTreemap />
            </Paper>
          </Grid>
        </Grid>
      </Container>
    </Box>
  );
}
